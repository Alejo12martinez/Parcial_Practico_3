
package com.servicios.restapiclient;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author alejo
 */
public class RestClientServicesGUI extends javax.swing.JFrame {

     private RestClient restClient;
    
    /**
     * Creates new form RestClientServicesGUI
     */
    public RestClientServicesGUI() {
        initComponents();
        restClient = new RestClient();
        loadAllBooks(); // Llama a este método para cargar todos los libros al iniciar la aplicación
         setLocationRelativeTo(null); // Centra la ventana en la pantalla
         setVisible(true);
        
        // Seleccionar por defecto el radio button "Update"
        jRadioUpdate.setSelected(true);
        jButton_search.setEnabled(false);
        jButton_Enter.setText("Update");
    }
  
    private void loadAllBooks() {
        List<Book> allBooks = restClient.sendGetAllBooks();

        if (allBooks != null) {
            displayBooksInTable(allBooks);
        } else {
            showErrorMessage("Error retrieving book data.");
        }
    }

    private void showErrorMessage(String message) {
        // Puedes personalizar este método según tus necesidades.
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupCRUD = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        JText_Title = new javax.swing.JTextField();
        JText_Description = new javax.swing.JTextField();
        JText_Author = new javax.swing.JTextField();
        jLabel_Title = new javax.swing.JLabel();
        jLabel_Description = new javax.swing.JLabel();
        jLabel_Author = new javax.swing.JLabel();
        jRadioCreate = new javax.swing.JRadioButton();
        jRadioUpdate = new javax.swing.JRadioButton();
        jRadioDelete = new javax.swing.JRadioButton();
        jButton_search = new javax.swing.JButton();
        jText_Search = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResultados = new javax.swing.JTable();
        jButton_Enter = new javax.swing.JButton();
        jLabel_Author1 = new javax.swing.JLabel();
        jRadioSearch = new javax.swing.JRadioButton();
        jButton_All = new javax.swing.JButton();
        jButton_Clean = new javax.swing.JButton();
        jButton_Autor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51)));

        jLabel_Title.setText("Title :");

        jLabel_Description.setText("Description :");

        jLabel_Author.setText("Author :");

        buttonGroupCRUD.add(jRadioCreate);
        jRadioCreate.setText("Create");
        jRadioCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioCreateActionPerformed(evt);
            }
        });

        buttonGroupCRUD.add(jRadioUpdate);
        jRadioUpdate.setText("Update");
        jRadioUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioUpdateActionPerformed(evt);
            }
        });

        buttonGroupCRUD.add(jRadioDelete);
        jRadioDelete.setText("Delete");
        jRadioDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioDeleteActionPerformed(evt);
            }
        });

        jButton_search.setText("Search");
        jButton_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_searchActionPerformed(evt);
            }
        });

        jTableResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Title", "Description", "Author"
            }
        ));
        jScrollPane2.setViewportView(jTableResultados);

        jButton_Enter.setText("Enter");
        jButton_Enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EnterActionPerformed(evt);
            }
        });

        jLabel_Author1.setText("ID : ");

        buttonGroupCRUD.add(jRadioSearch);
        jRadioSearch.setText("Search");
        jRadioSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioSearchActionPerformed(evt);
            }
        });

        jButton_All.setText("All");
        jButton_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AllActionPerformed(evt);
            }
        });

        jButton_Clean.setText("Clean");
        jButton_Clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CleanActionPerformed(evt);
            }
        });

        jButton_Autor.setText("Autor");
        jButton_Autor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AutorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Title)
                            .addComponent(jLabel_Description)
                            .addComponent(jLabel_Author))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(JText_Description, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                            .addComponent(JText_Author)
                            .addComponent(JText_Title))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioUpdate)
                            .addComponent(jRadioDelete)
                            .addComponent(jRadioCreate))
                        .addGap(21, 21, 21))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel_Author1)
                                .addGap(57, 57, 57)
                                .addComponent(jText_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_search, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioSearch))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton_All, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Enter, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jButton_Clean, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Autor, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(13, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JText_Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Title)
                    .addComponent(jRadioUpdate))
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JText_Description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Description)
                    .addComponent(jRadioDelete))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JText_Author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Author)
                    .addComponent(jRadioCreate))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jText_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_search)
                    .addComponent(jLabel_Author1)
                    .addComponent(jRadioSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Clean, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_All, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Enter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Autor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_searchActionPerformed
        String title = jText_Search.getText();
        try {
            int bookId = Integer.parseInt(title);
            Book book = restClient.sendGetRequest(bookId);

            if (book != null) {
                List<Book> books = new ArrayList<>();
                books.add(book);
                displayBooksInTable(books);
                System.out.println("GET button clicked");
                System.out.println("Response from server: " + books);
            } else {
                showErrorMessage("Book not found.");
            }
        } catch (NumberFormatException ex) {
            showErrorMessage("Invalid book ID. Please enter a numeric value.");
        }

    }//GEN-LAST:event_jButton_searchActionPerformed

    private void displayBooksInTable(List<Book> books) {
        DefaultTableModel model = (DefaultTableModel) jTableResultados.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de agregar nuevos datos

        for (Book book : books) {
            Object[] row = {book.getId(), book.getTitle(), book.getDescription(), book.getAuthor()};
            model.addRow(row);
        }
    }

    private void jButton_EnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EnterActionPerformed
        
        try {
            if (jRadioCreate.isSelected()) {
                validateFields(); // Agrega esta línea para validar campos antes de la creación
                createNewBook();
            } else if (jRadioUpdate.isSelected()) {
                validateFields(); // Agrega esta línea para validar campos antes de la actualización
                updateExistingBook();
            } else if (jRadioDelete.isSelected()) {
                // Lógica para la eliminación de un libro existente
                deleteExistingBook();
            } else {
                // Ningún radio button seleccionado
                showErrorMessage("Select an action (Create, Update, Delete) before clicking Enter.");
            }
        } catch (ValidationException ex) {
            showErrorMessage(ex.getMessage());
        }
    
    }//GEN-LAST:event_jButton_EnterActionPerformed
    private void validateFields() throws ValidationException {
        String title = JText_Title.getText();
        String description = JText_Description.getText();
        String author = JText_Author.getText();

        if (title.isEmpty() || description.isEmpty() || author.isEmpty()) {
            throw new ValidationException("All fields are required. Please fill in all fields.");
        }
       
    }

// Agrega esta clase para manejar excepciones de validación personalizadas
    class ValidationException extends Exception {

        public ValidationException(String message) {
            super(message);
        }
    }

    private void createNewBook() {
        // Obtener datos del formulario
        String title = JText_Title.getText();
        String description = JText_Description.getText();
        String author = JText_Author.getText();

        // Crear un nuevo objeto Book
        Book newBook = new Book(null, title, description, author);

        // Convertir el objeto Book a JSON
        String jsonBody = convertBookToJson(newBook);

        // Enviar la solicitud POST para crear un nuevo libro
        restClient.sendPostRequest(jsonBody);

        // Actualizar la tabla con todos los libros después de la creación
        loadAllBooks();
    }

    private void updateExistingBook() {
        try {
            // Obtener el ID del libro a actualizar
            int bookId = Integer.parseInt(jText_Search.getText());

            // Verificar si el libro existe antes de intentar actualizar
            Book existingBook = restClient.sendGetRequest(bookId);

            if (existingBook != null) {
                // Obtener los nuevos datos del formulario
                String newTitle = JText_Title.getText();
                String newDescription = JText_Description.getText();
                String newAuthor = JText_Author.getText();

                // Construir un nuevo objeto Book con los datos actualizados
                Book updatedBook = new Book(Integer.toString(bookId), newTitle, newDescription, newAuthor);

                // Enviar la solicitud PUT para actualizar el libro
                restClient.sendPutRequest(bookId, updatedBook);

                // Actualizar la tabla con todos los libros después de la modificación
                loadAllBooks();
            } else {
                showErrorMessage("Book with ID " + bookId + " does not exist. Cannot update.");
            }
        } catch (NumberFormatException ex) {
            showErrorMessage("Invalid book ID. Please enter a numeric value for updating.");
        }
    }

    private void deleteExistingBook() {
        try {
            // Obtener el ID del libro a eliminar
            int bookId = Integer.parseInt(jText_Search.getText());

            // Verificar si el libro existe antes de enviar la solicitud DELETE
            Book existingBook = restClient.sendGetRequest(bookId);

            if (existingBook != null) {
                // Enviar la solicitud DELETE para eliminar el libro
                restClient.sendDeleteRequest(bookId);

                // Actualizar la tabla con todos los libros después de la eliminación
                loadAllBooks();
            } else {
                showErrorMessage("Book with ID " + bookId + " does not exist. Cannot delete.");
            }
        } catch (NumberFormatException ex) {
            showErrorMessage("Invalid book ID. Please enter a numeric value for deletion.");
        }
    }

    private String convertBookToJson(Book book) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.writeValueAsString(book);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    
    private void jRadioUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioUpdateActionPerformed
        resetComponentsState();
        jButton_search.setEnabled(false);
        jButton_Enter.setText("Update");
    }//GEN-LAST:event_jRadioUpdateActionPerformed

    private void jRadioDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioDeleteActionPerformed
        resetComponentsState();
        JText_Title.setEnabled(false);
        JText_Description.setEnabled(false);
        JText_Author.setEnabled(false);
        jButton_search.setEnabled(false);
        jButton_Enter.setText("Delete");
    }//GEN-LAST:event_jRadioDeleteActionPerformed

    private void jRadioCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioCreateActionPerformed
        resetComponentsState();
        jText_Search.setEnabled(false);
        jButton_search.setEnabled(false);
        jButton_Enter.setText("Create");
    }//GEN-LAST:event_jRadioCreateActionPerformed

    private void jRadioSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioSearchActionPerformed
        resetComponentsState();
        JText_Title.setEnabled(false);
        JText_Description.setEnabled(false);
        JText_Author.setEnabled(false);
       jButton_Enter.setEnabled(false);
    }//GEN-LAST:event_jRadioSearchActionPerformed

    private void jButton_AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AllActionPerformed
         loadAllBooks(); 
    }//GEN-LAST:event_jButton_AllActionPerformed

    private void jButton_CleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CleanActionPerformed
        JText_Title.setText("");
        JText_Description.setText("");
        JText_Author.setText("");
        jText_Search.setText("");
    }//GEN-LAST:event_jButton_CleanActionPerformed

    private void jButton_AutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AutorActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Parcial 3\nAsignatura: Servicios Telematicos\n"
                    + "Presentado por: Alejandro Giraldo Martínez\nCodigo: 2161631");
    }//GEN-LAST:event_jButton_AutorActionPerformed

    private void resetComponentsState() {
        JText_Title.setEnabled(true);
        JText_Description.setEnabled(true);
        JText_Author.setEnabled(true);
        jText_Search.setEnabled(true);
        jButton_search.setEnabled(true);
        jButton_Enter.setText("Enter");
        jButton_Enter.setEnabled(true);
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestClientServicesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestClientServicesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestClientServicesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestClientServicesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RestClientServicesGUI().setVisible(true);
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JText_Author;
    private javax.swing.JTextField JText_Description;
    private javax.swing.JTextField JText_Title;
    private javax.swing.ButtonGroup buttonGroupCRUD;
    private javax.swing.JButton jButton_All;
    private javax.swing.JButton jButton_Autor;
    private javax.swing.JButton jButton_Clean;
    private javax.swing.JButton jButton_Enter;
    private javax.swing.JButton jButton_search;
    private javax.swing.JLabel jLabel_Author;
    private javax.swing.JLabel jLabel_Author1;
    private javax.swing.JLabel jLabel_Description;
    private javax.swing.JLabel jLabel_Title;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioCreate;
    private javax.swing.JRadioButton jRadioDelete;
    private javax.swing.JRadioButton jRadioSearch;
    private javax.swing.JRadioButton jRadioUpdate;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableResultados;
    private javax.swing.JTextField jText_Search;
    // End of variables declaration//GEN-END:variables
}
